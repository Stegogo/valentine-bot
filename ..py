import tkinter as tk
from random import shuffle
from tkinter.messagebox import showinfo, showerror
import pickle

colors = {
    1: '#0805b3',
    2: '#e8ad0c',
    3: '#f2493d',
    4: '#08055e',
    5: '#520b03',
    6: '#156b5b',
    7: '#8a1c77',
    8: '#21d95b'  # –°–ª–æ–≤–Ω–∏–∫ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
}


class Button(tk.Button):  # –ö–ª–∞—Å –∫–Ω–æ–ø–∫–∏

    def __init__(self, master, x, y, number=0):
        '''–§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫'''
        super(Button, self).__init__(master, width='3', font=('Areal 15 bold'))
        self.x = x  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö
        self.y = y  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É
        self.number = number  # –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        self.is_mine = False  # –ß–∏ —î –∫–Ω–æ–ø–∫–∞ –º—ñ–Ω–æ—é
        self.amount_bombs = 0  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω —É —Å—É—Å—ñ–¥–Ω—ñ—Ö –∫–Ω–æ–ø–∫–∞—Ö
        self.is_open = False  # –ß–∏ –±—É–¥–∞ —Ü—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞


class Mines:  # –ö–ª–∞—Å —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Ç–∞ –≤—Å—ñ—î—ó –≥—Ä–∏
    win = tk.Tk()  # –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
    ROW = 9  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
    COLUMN = 9  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
    AMOUNT_OF_MINES = 9  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω
    GAME_OVER = False  # –ß–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≥—Ä–∞
    FIRST_ClICK = True  # –ß–∏ —Ü–µ –ø–µ—Ä—à–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    RUNNING = True  # –ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä—É

    def __init__(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–Ω–æ–ø–∫–∏ —Ç–∞ –∑—á–∏—Ç—É—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –Ω–∏—Ö"""
        self.buttons = []
        for i in range(Mines.ROW + 2):  # +2, —Ç–æ–º—É —â–æ 1–π —Ä—è–¥–æ–∫ - –±–∞—Ä'—î—Ä–Ω–∏–π, –π–æ–≥–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –∑–≤–∏—á–∞–π–Ω–∏—Ö
            temp = []  # –°–ø–∏—Å–æ–∫, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
            for j in range(Mines.COLUMN + 2):
                btn = Button(Mines.win, x=i, y=j)
                btn.config(command=lambda button=btn: self.click(button))  # –ö–æ–º–∞–Ω–¥–∞, —è–∫–∞ —Ä–æ–±–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—é
                btn.bind('<Button-3>', self.right_click)  # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ
                btn.bind('<Button-2>', self.wheel_click)  # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–æ–ª–µ—â–∞—Ç–∫–æ–º –º–∏—à—ñ
                temp.append(btn)
            self.buttons.append(temp)

    def create_widgets(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–æ–∑–º—ñ—â—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –ø–æ–ª—ñ. –¢–∞–∫–æ–∂ –≤–æ–Ω–∞ —Å—Ç–≤–æ—Ä—é—î —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä"""
        Mines.win.title('Minesweeper')
        timer = tk.Label(self.win, text="0", fg="black", font="Verdana 30 bold")
        timer.grid(row=0, column=2, columnspan=2, sticky='nsew')
        bomb_count_label = tk.Label(self.win, text=Mines.AMOUNT_OF_MINES, fg="black", font="Verdana 30 bold")
        bomb_count_label.grid(row=0, column=8, columnspan=2, sticky='nsew')

        def counter_label(timer):
            def count():
                if Mines.RUNNING:
                    display = str(Mines.counter)
                    timer.config(text=display)
                    timer.after(1000, count)
                    Mines.counter += 1

            count()

        counter_label(timer)

        menubar = tk.Menu(self.win)
        self.win.config(menu=menubar)
        settings_menu = tk.Menu(menubar, tearoff=0)
        settings_menu.add_command(label='–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', command=self.restart)
        settings_menu.add_command(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', command=self.create_settings)
        settings_menu.add_command(label='–í—ã—Ö–æ–¥', command=self.exit)
        menubar.add_cascade(label='–§–∞–π–ª', menu=settings_menu)
        settings_menu_reg = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', menu=settings_menu_reg)
        settings_menu_reg.add_command(label='–í–æ–π—Ç–∏', command=self.login)
        settings_menu_reg.add_command(label='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', command=self.registration)
        settings_menu_reg.add_command(label='–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤', command=self.rates_table)

        count = 1
        for i in range(1, Mines.ROW + 1):
            for j in range(1, Mines.COLUMN + 1):
                btn = self.buttons[i][j]
                btn.config(relief='raised')
                btn.number = count
                btn.grid(row=i, column=j, stick='NESW')
                count += 1

        for i in range(1, Mines.ROW + 1):
            tk.Grid.grid_rowconfigure(self.win, i, weight=1)
        for j in range(1, Mines.COLUMN + 1):
            tk.Grid.grid_columnconfigure(self.win, j, weight=1)

    def starting(self):
        """–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –≥—Ä–∏"""
        self.create_widgets()
        Mines.win.mainloop()

    cur_amount = AMOUNT_OF_MINES
    bad_flags = []  # –°–ø–∏—Å–æ–∫ –∑ –Ω–æ–º–µ—Ä–∞–º–∏ –º—ñ–Ω, —è–∫—ñ –Ω–µ —î –±–æ–º–±–∞–º–∏, –∞–ª–µ –Ω–∞ –Ω–∏—Ö —Å—Ç–æ—è—Ç—å —Ñ–ª–∞–∂–∫–∏

    def right_click(self, event):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø—Ä–∞–≤–æ—ó –∫–Ω–æ–ø–∫–∏ –º–∏—à—ñ.
        –¢–∞–∫–æ–∂ –≤–æ–Ω–∞ –≤–∏–≤–æ–¥–∏—Ç—å –ª—ñ—á–∏–ª—å–Ω–∏–∫ –±–æ–º–±, –æ–±—Ä–æ–±–ª—è—î –ø–µ—Ä–µ–º–æ–≥—É —Ç–∞ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î
        –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –≥—Ä–∞–≤—Ü—è –∑–∞ –≥—Ä—É"""
        bomb_count_label = tk.Label(self.win, text=Mines.AMOUNT_OF_MINES, fg="black", font="Verdana 30 bold")
        bomb_count_label.grid(row=0, column=8, columnspan=2, sticky='nsew')  # –ü–æ–ª–µ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞

        if Mines.GAME_OVER:  # –¶–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ø—ñ—Å–ª—è –ø–æ—Ä–∞–∑–∫–∏ –Ω–µ –º–æ–∂–Ω–∞ –±—É–ª–æ —Å—Ç–∞–≤–∏—Ç–∏ –Ω–æ–≤—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
            return
        cur_btn = event.widget


        if cur_btn['state'] == 'normal':
            cur_btn['state'] = 'disabled'
            cur_btn['text'] = 'üö©'
            cur_btn['disabledforeground'] = 'red'
            Mines.cur_amount -= 1
            bomb_count_label['text'] = Mines.cur_amount  # –ó–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫—É
            if cur_btn.number in Mines.static_bombs_places:
                Mines.bomb_places.remove(cur_btn.number)  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—É –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏ —ñ–∑ —Å–ø–∏—Å–∫–∞ –∑ –±–æ–º–±–∞–º–∏
            else:
                Mines.bad_flags.append(cur_btn.number)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—É –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —Ü–µ –Ω–µ –º—ñ–Ω–∞
            print(Mines.bad_flags)
        elif cur_btn['text'] == 'üö©':
            cur_btn['text'] = ''
            cur_btn['state'] = 'normal'
            Mines.cur_amount += 1
            bomb_count_label['text'] = Mines.cur_amount  # –ó–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫—É
            if cur_btn.number in Mines.static_bombs_places:  #
                Mines.bomb_places.append(cur_btn.number)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—É –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏ –¥–æ —Å–ø–∏—Å–∫–∞ –∑ –±–æ–º–±–∞–º–∏
            else:
                Mines.bad_flags.remove(cur_btn.number)  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—É –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —Ü–µ –Ω–µ –º—ñ–Ω–∞
        if Mines.bomb_places == [] and Mines.cur_amount == 0:  # –£–º–æ–≤–∞ –ø–µ—Ä–µ–º–æ–≥–∏: –∂–æ–¥–Ω–æ—ó –±–æ–º–±–∏ –≤ —Å–ø–∏—Å–∫—É –∑ –±–æ–º–±–∞–º–∏
            # —Ç–∞ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–π–≤–æ–≥–æ –ø—Ä–∞–ø–æ—Ä—Ü—è
            Mines.RUNNING = False  # –ó—É–ø–∏–Ω–∫–∞ —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä–∞
            showinfo('WIN!', '–í—ã –≤—ã–≥—Ä–∞–ª–∏!')  # –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–º–æ–≥—É
            Mines.cur_points = Mines.AMOUNT_OF_MINES - Mines.cur_amount - len(Mines.bad_flags)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å
            # –≤–≥–∞–¥–∞–Ω–∏—Ö –º—ñ–Ω
            if Mines.ind != -1:
                Mines.rate_l[Mines.ind] = int(Mines.rate_l[Mines.ind]) + int(Mines.cur_points)  # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤
            with open('rate', 'wb') as f:
                pickle.dump(Mines.rate_l, f)  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–æ —Ñ–∞–π–ª—É
            Mines.GAME_OVER = True  # –í–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞—à—É

    def wheel_click(self, event):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–æ–ª–µ—â–∞—Ç–∫–∞ –º–∏—à—ñ"""
        if Mines.GAME_OVER:
            return
        cur_btn = event.widget
        if cur_btn['state'] == 'normal':
            cur_btn['state'] = 'disabled'
            cur_btn['text'] = '?'
            cur_btn['disabledforeground'] = '#eb7434'
        elif cur_btn['text'] == '?':
            cur_btn['text'] = ''
            cur_btn['state'] = 'normal'

    clicked_buttons = []  # –°–ø–∏—Å–æ–∫ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫

    cur_points = 0  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∫—ñ–≤

    def click(self, clicked_button: Button):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –º–∏—à—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É. –Ñ –æ–¥–Ω—ñ—î—é –∑ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
         –¢–∞–∫–æ–∂ –æ–±—Ä–æ–±–ª—è—î –ø–æ—Ä–∞–∑–∫—É"""
        if Mines.FIRST_ClICK:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ü–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø–µ—Ä—à–∏–º
            self.insert_mines(clicked_button.number)  # –ú–µ—Ç–æ–¥, —è–∫–∏–π —Ä–æ–∑—Å—Ç–∞–≤–ª—è—î –º—ñ–Ω–∏
            self.amount_mines_near()  # –ú–µ—Ç–æ–¥, —è–∫–∏–π —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –ø–æ—Ä—è–¥ –∑ –∫–Ω–æ–ø–∫–æ—é
            self.print_buttons()  # –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–Ω–æ–ø–æ–∫ —Ç–∞ –º—ñ–Ω–∏
            Mines.FIRST_ClICK = False

        if Mines.GAME_OVER:
            return None

        color = colors.get(clicked_button.amount_bombs, 'black')
        if clicked_button.is_mine:  # –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ - –º—ñ–Ω–∞
            clicked_button.config(text='üí£', bg='red', disabledforeground='black')
            clicked_button.is_open = True
            Mines.RUNNING = False
            Mines.GAME_OVER = True
            showinfo('GAME OVER', '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
            print('bad_f:', len(Mines.bad_flags))
            Mines.cur_points = Mines.AMOUNT_OF_MINES - Mines.cur_amount - len(Mines.bad_flags)
            print('rate: ', Mines.rate_l)
            print(('ind', Mines.ind))
            if Mines.ind != -1:
                Mines.rate_l[Mines.ind] = int(Mines.rate_l[Mines.ind]) + int(Mines.cur_points)
                print(Mines.sort(Mines.rate_l_dinamic))
                # Mines.load_result_dic()[Mines.cur_user].append(Mines.cur_points)
                Mines.result_dic_updated[Mines.cur_user].append(Mines.cur_points)
                print(Mines.result_dic_updated)
                with open('result_dict', 'wb') as f:
                    pickle.dump(Mines.result_dic_updated, f)
            with open('rate', 'wb') as f:
                pickle.dump(Mines.rate_l, f)
            for i in range(1, Mines.ROW + 1):  # –ü—Ä–æ—è–≤ —É—Å—ñ—Ö –º—ñ–Ω
                for j in range(1, Mines.COLUMN + 1):
                    btn = self.buttons[i][j]
                    if btn.is_mine:
                        btn['text'] = 'üí£'
        elif clicked_button.amount_bombs:  # –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –º—ñ–Ω–∞, –∞–ª–µ –ø–æ—Ä—è–¥ —î –º—ñ–Ω–∏
            clicked_button.config(text=clicked_button.amount_bombs, disabledforeground=color)
            clicked_button.is_open = True
            Mines.clicked_buttons.append(clicked_button.number)
        else:  # –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –º—ñ–Ω–∞, —ñ –º—ñ–Ω –ø–æ—Ä—è–¥ –Ω–µ–º–∞—î
            clicked_button.config(text='')
            clicked_button.is_open = True
            for row in [-1, 0, 1]:  # –í—ñ–¥–∫—Ä–∏–≤–∞–Ω–Ω—è "–ø—É—Å—Ç–æ—ó" –∑–æ–Ω–∏
                for col in [-1, 0, 1]:
                    btn = self.buttons[clicked_button.x + row][clicked_button.y + col]
                    if not btn.is_open and btn.number != 0 and btn['text'] != 'üö©' and btn['text'] != '?':
                        self.click(btn)
        clicked_button.config(state='disabled')
        clicked_button.config(relief=tk.SUNKEN)

    def restart(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –≥—Ä—É –Ω–µ –≤–∏—Ö–æ–¥—è—á–∏ –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞.
        –§–∞–∫—Ç–∏—á–Ω–æ –≤–æ–Ω–∞ –≤—ñ–¥–∫–∞—Ç—É—î —É—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö"""
        [child.destroy() for child in self.win.winfo_children()]  # –†—É–π–Ω—É–≤–∞–Ω–Ω—è —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
        self.__init__()
        Mines.RUNNING = True
        Mines.counter = 0
        self.create_widgets()
        Mines.all_places.clear()
        Mines.bomb_places.clear()
        Mines.clicked_buttons.clear()
        Mines.static_bombs_places.clear()
        Mines.cur_amount = Mines.AMOUNT_OF_MINES
        Mines.FIRST_ClICK = True
        Mines.GAME_OVER = False

    def change_settings(self, row: tk.Entry, column: tk.Entry, mines: tk.Entry):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –¥–æ–∑–≤–æ–ª—è—î –≥—Ä–∞–≤—Ü—é —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ –ø–æ–ª—è —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω"""
        try:
            int(row.get()), int(column.get()), int(mines.get())
        except ValueError:  # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è - –Ω–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞
            showerror('–û—à–∏–±–∫–∞', '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
            return
        Mines.ROW = int(row.get())
        Mines.COLUMN = int(column.get())
        Mines.AMOUNT_OF_MINES = int(mines.get())
        self.restart()

    def create_settings(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        win_settings = tk.Toplevel(self.win)
        win_settings.wm_title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫').grid(row=0, column=0)
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫').grid(row=1, column=0)
        tk.Label(win_settings, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω').grid(row=2, column=0)
        row_entry = tk.Entry(win_settings)
        row_entry.insert(0, Mines.ROW)
        row_entry.grid(row=0, column=1, padx=20, pady=20)
        col_entry = tk.Entry(win_settings)
        col_entry.insert(0, Mines.COLUMN)
        col_entry.grid(row=1, column=1, padx=20, pady=20)
        mines_entry = tk.Entry(win_settings)
        mines_entry.insert(0, Mines.AMOUNT_OF_MINES)
        mines_entry.grid(row=2, column=1, padx=20, pady=20)
        save_btn = tk.Button(win_settings, text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
                             command=lambda: self.change_settings(row_entry, col_entry, mines_entry))
        save_btn.grid(row=4, column=1, columnspan=2, pady=20, sticky='w')

        def select_lvl():
            """–§—É–Ω–∫—Ü—ñ—è, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–ª—è –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–≥–æ, —è–∫–∏–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–≤ –≥—Ä–∞–≤–µ—Ü—å.
            –í–æ–Ω–∞ –≤–≤–æ–¥–∏—Ç—å —Å—Ç–∞–ª—ñ —Ä–æ–∑–º—ñ—Ä–∏ –ø–æ–ª—è —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ–Ω"""
            lvl = lvl_var.get()
            if lvl == 1:
                Mines.ROW = 9
                Mines.COLUMN = 9
                Mines.AMOUNT_OF_MINES = 10
                self.restart()
            elif lvl == 2:
                Mines.ROW = 16
                Mines.COLUMN = 16
                Mines.AMOUNT_OF_MINES = 40
                self.restart()
            elif lvl == 3:
                Mines.ROW = 16
                Mines.COLUMN = 30
                Mines.AMOUNT_OF_MINES = 90
                self.restart()

        lvl_var = tk.IntVar()
        tk.Radiobutton(win_settings, text='–ù–æ–≤–∏—á–æ–∫', variable=lvl_var, value=1, command=select_lvl).grid(row=3,
                                                                                                         column=0)
        tk.Radiobutton(win_settings, text='–õ—é–±–∏—Ç–µ–ª—å', variable=lvl_var, value=2, command=select_lvl).grid(row=3,
                                                                                                          column=1)
        tk.Radiobutton(win_settings, text='–≠–∫—Å–ø–µ—Ä—Ç', variable=lvl_var, value=3, command=select_lvl).grid(row=3,
                                                                                                         column=2)

    def exit(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –≤–∏—Ö—ñ–¥ –∑ –≥—Ä–∏. –¢–∞–∫–æ–∂ –≤ –Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω –∑–∞–ø–∏—Ç –ø—Ä–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∏"""

        save_ask = tk.Toplevel(self.win)
        save_ask.wm_title('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ')
        save_ask.geometry('200x100')
        tk.Label(save_ask, text='').grid(row=1, column=1)
        tk.Label(save_ask, text='        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã?').grid(row=2, column=1, columnspan=2, sticky='es')
        tk.Label(save_ask, text='').grid(row=3, column=1)
        yes_button = tk.Button(save_ask, text='–î–∞', command=lambda:
        [Mines.saving(Mines.static_bombs_places), Mines.load(), Mines.saving_click(Mines.clicked_buttons),
         Mines.load_click(), Mines.win.destroy()])
        yes_button.grid(row=4, column=1, sticky='se')
        no_button = tk.Button(save_ask, text='–ù–µ—Ç', command=lambda: [Mines.clearing(), Mines.win.destroy()])
        no_button.grid(row=4, column=2, sticky='s')

    def saving(bomb_places):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –±–æ–º–± –¥–∞–Ω–æ—ó –≥—Ä–∏ —É —Ñ–∞–π–ª"""
        Mines.SAVING = True
        with open('bin_saving', 'wb') as f:
            pickle.dump(bomb_places, f)

    def load():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑—á–∏—Ç—É—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –±–æ–º–± –¥–∞–Ω–æ—ó –≥—Ä–∏ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open('bin_saving', 'rb') as f:
                return pickle.load(f)
        except EOFError:
            return None

    bin_saving_bombs = load()

    def saving_click(click_places):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ–º–µ—Ä–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ —É —Ñ–∞–π–ª"""
        Mines.SAVING = True
        with open('bin_saving_click', 'wb') as f:
            pickle.dump(click_places, f)

    def load_click():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑—á–∏—Ç—É—î –Ω–æ–º–µ—Ä–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open('bin_saving_click', 'rb') as k:
                return pickle.load(k)
        except EOFError:
            return None

    bin_clicked_buttons = load_click()

    def clearing():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ—á–∏—â—É—î —Ñ–∞–π–ª–∏, –≤ —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞–ª–∏—Å—è –ø–æ–ª–æ–∂–µ–Ω–Ω—è –º—ñ–Ω –Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        open('bin_saving', 'w').close()
        open('bin_saving_click', 'w').close()

    logins = []
    passwords = []
    rates = []

    def registration(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""

        def get_inf():
            login_inf = login.get()
            password_inf = password.get()
            check_pass = password_check.get()
            if login_inf == '':
                showerror('–û—à–∏–±–∫–∞!', '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
            elif login_inf in Mines.login_l:
                showerror('–û—à–∏–±–∫–∞!', '–ò–º—è –∑–∞–Ω—è—Ç–æ')
            elif password_inf == '':
                showerror('–û—à–∏–±–∫–∞!', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
            elif len(password_inf) < 8:
                showerror('–û—à–∏–±–∫–∞!', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
            elif check_pass == '':
                showerror('–û—à–∏–±–∫–∞!', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ')
            elif password_inf != check_pass:
                showerror('–û—à–∏–±–∫–∞!', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            else:
                Mines.login_l.append(login_inf)
                Mines.password_l.append(password_inf)
                Mines.rate_l.append(0)
                print(Mines.login_l)
                print(Mines.password_l)
                print(Mines.rate_l)
                with open('logins', 'wb') as f:
                    pickle.dump(Mines.login_l, f)
                with open('passwords', 'wb') as f:
                    pickle.dump(Mines.password_l, f)
                with open('rate', 'wb') as f:
                    pickle.dump(Mines.rate_l, f)
                reg_win.destroy()

        def show_pass():
            """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–º—ñ–Ω—é—î "*" –Ω–∞ —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –±—É–ª–∏ –≤–≤–µ–¥–µ–Ω—ñ –≤ –ø–∞—Ä–æ–ª—ñ"""
            password['text'] = password.get()

        reg_win = tk.Toplevel(self.win)
        reg_win.attributes('-topmost', True)
        reg_win.wm_title('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        reg_win.geometry('300x250')
        tk.Label(reg_win, text='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω').grid(row=0, column=0)
        tk.Label(reg_win, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å').grid(row=1, column=0)
        tk.Label(reg_win, text='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å').grid(row=2, column=0)
        login = tk.Entry(reg_win)
        login.grid(row=0, column=1, padx=20, pady=20)
        password = tk.Entry(reg_win, show='*')
        password.grid(row=1, column=1, padx=20, pady=20)
        password_check = tk.Entry(reg_win, show='*')
        password_check.grid(row=2, column=1, padx=20, pady=20)
        save_btn = tk.Button(reg_win, text='O–∫', height=1, width=6, command=get_inf)
        save_btn.grid(row=4, column=0, pady=20)
        show_btn = tk.Button(reg_win, text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å', height=1, width=13, command=show_pass)
        show_btn.grid(row=4, column=1, pady=20)

    def rate_load():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑—á–∏—Ç—É—î —Å–ø–∏—Å–æ–∫ –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open('rate', 'rb') as f:
                return pickle.load(f)
        except EOFError:
            return []

    rate_l = rate_load()
    rate_l_dinamic = rate_load()
    rate_l_dinamic2 = rate_load()

    def login_load():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑—á–∏—Ç—É—î —Å–ø–∏—Å–æ–∫ –∑ –ª–æ–≥—ñ–Ω–∞–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open('logins', 'rb') as f:
                return pickle.load(f)
        except EOFError:
            return []

    login_l = login_load()
    login_l_dinamic = login_load()

    def password_load():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑—á–∏—Ç—É—î —Å–ø–∏—Å–æ–∫ –∑ –ø–∞—Ä–æ–ª—è–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open('passwords', 'rb') as f:
                return pickle.load(f)
        except EOFError:
            return []

    password_l = password_load()

    print(rate_l)
    print(login_l)
    print(password_l)

    result_dict = {login_l: [] for login_l in login_l}

    def load_result_dic():
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑—á–∏—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        try:
            with open('result_dict', 'rb') as k:
                return pickle.load(k)
        except EOFError:
            return None

    result_dic_updated = load_result_dic()
    print(result_dic_updated)
    cur_user = ''
    ind = -1

    def login(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""

        def get_inf_2():
            login_inf = login.get()
            password_inf = password.get()
            if login_inf == '':
                showerror('–û—à–∏–±–∫–∞!', '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
            elif password_inf == '':
                showerror('–û—à–∏–±–∫–∞!', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
            elif login_inf not in Mines.login_l:
                showerror('–û—à–∏–±–∫–∞!', '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            else:
                Mines.ind = Mines.login_l.index(login_inf)
                if password_inf != Mines.password_l[Mines.ind]:
                    showerror('–û—à–∏–±–∫–∞!', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å')
                elif password_inf == Mines.password_l[Mines.ind]:
                    Mines.cur_user = login_inf
                    print('cur user: ', Mines.cur_user)
                    print('ind: ', Mines.ind)
                log_win.destroy()

        log_win = tk.Toplevel(self.win)
        log_win.wm_title('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
        log_win.attributes('-topmost', True)
        log_win.geometry('300x200')
        tk.Label(log_win, text='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω').grid(row=0, column=0)
        tk.Label(log_win, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å').grid(row=1, column=0)
        login = tk.Entry(log_win)
        login.grid(row=0, column=1, padx=20, pady=20)
        password = tk.Entry(log_win, show='*')
        password.grid(row=1, column=1, padx=20, pady=20)
        save_btn = tk.Button(log_win, text='O–∫', height=1, width=6, command=get_inf_2)
        save_btn.grid(row=4, column=0, columnspan=2, pady=20)

    sort_logins = []

    def sort(rate_list):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å–æ—Ä—Ç—É—î –ª–æ–≥—ñ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤. –ù–∞ 1—à–æ–º—É –º—ñ—Å—Ü—ñ —Å—Ç–∞—î —Ç–æ–π, —É –∫–æ–≥–æ –Ω–∞–π–±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤"""
        n = len(rate_list)
        for i in range(n):
            maxi_ind = rate_list.index(max(rate_list))
            Mines.sort_logins.append(Mines.login_l_dinamic[maxi_ind])
            rate_list.pop(maxi_ind)
            Mines.login_l_dinamic.pop(maxi_ind)
        return Mines.sort_logins

    sort_rates_ = []

    def sort_rates(rate_list):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å–æ—Ä—Ç—É—î –±–∞–ª–∏ –≥—Ä–∞–≤—Ü—ñ–≤."""
        n = len(rate_list)
        for i in range(n):
            maxi_ind = rate_list.index(max(rate_list))
            Mines.sort_rates_.append(Mines.rate_l_dinamic2[maxi_ind])
            rate_list.pop(maxi_ind)
        return Mines.sort_rates_







    def rates_table(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–µ –≤—ñ–∫–Ω–æ"""

        def on_click(event):
            '''–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏ —É –≤—ñ–∫–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É'''
            global button_text
            button_text = event.widget.cget('text')
            return button_text



        def results():
            """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è"""
            self_res_win = tk.Toplevel(Mines.win)
            self_res_win['bg'] = "#FAFAFA"
            self_res_win.wm_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
            self_res_win.attributes('-topmost', True)
            self_res_win.geometry('600x200')
            user_name = tk.Label(self_res_win, height=1, text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ {button_text}:", bg="#FAFAFA",
                                 font="Bahnschrift 16")
            user_name.place(relx=0.5, y=15, anchor="center")
            user_results = tk.Label(self_res_win, height=1, text=Mines.result_dic_updated[button_text][10::-1],
                                    bg="#FAFAFA", font="Bahnschrift 16")
            user_results.place(relx=0.5, y=80, anchor="center")


        rate_win = tk.Toplevel(self.win)
        rate_win['bg'] = "#FAFAFA"
        rate_win.wm_title('–†–µ–π—Ç–∏–Ω–≥')
        rate_win.attributes('-topmost', True)
        user_text = tk.Label(rate_win, height=1, text="–ò–≥—Ä–æ–∫", bg="#FAFAFA", font="Bahnschrift 16")
        score_text = tk.Label(rate_win, height=1, text="–°—á–µ—Ç", bg="#FAFAFA", font="Bahnschrift 16")
        user_text.place(relx=0.1, y=30, anchor="w")
        score_text.place(relx=0.9, y=30, anchor="e")
        pos = 80
        p = 0.15
        rate_win.resizable(False, False)
        for i, j in zip(Mines.sort(Mines.rate_l_dinamic), Mines.sort_rates(Mines.rate_l_dinamic2)):
            user_t = tk.Button(rate_win, height=1, text=i, bg="#FAFAFA", font="Bahnschrift 14", relief="flat",
                               command= results)
            user_t.place(relx=0.12, rely=p, anchor="w")
            user_t.bind('<Button-1>', on_click)
            user_sc = tk.Label(rate_win, height=1, text=j, bg="#FAFAFA", font="Bahnschrift 14")
            user_sc.place(relx=0.8, rely=p-0.035)
            p += 0.08
            rate_win.geometry(f'300x{pos + 40}')
            pos += 40

    counter = 0

    all_places = []
    bomb_places = []
    static_bombs_places = []

    def print_buttons(self):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –±–æ–º–± —Ç–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        for i in range(1, Mines.ROW + 1):
            for j in range(1, Mines.COLUMN + 1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    print('B', end=' ')
                else:
                    print(btn.amount_bombs, end=' ')
            print()
        num = 1
        for i in range(1, Mines.ROW + 1):
            for j in range(1, Mines.COLUMN + 1):
                btn = self.buttons[i][j]
                if btn.is_mine:
                    Mines.all_places.append('B')
                else:
                    Mines.all_places.append(num)
                num += 1
        print(Mines.all_places)
        index = 1
        for i in Mines.all_places:
            if i == 'B':
                Mines.bomb_places.append(index)
            index += 1
        print(Mines.bomb_places)

        index1 = 1
        for i in Mines.all_places:
            if i == 'B':
                Mines.static_bombs_places.append(index1)
            index1 += 1

    def insert_mines(self, number: int):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–æ–∑—Å—Ç–∞–≤–ª—è—î –º—ñ–Ω–∏"""
        ind_mines = self.mines_places(number)
        for i in range(1, Mines.ROW + 1):
            for j in range(1, Mines.COLUMN + 1):
                btn = self.buttons[i][j]
                if btn.number in ind_mines:
                    btn.is_mine = True

    def amount_mines_near(self):
        for i in range(1, Mines.ROW + 1):
            for j in range(1, Mines.COLUMN + 1):
                btn = self.buttons[i][j]
                amount_bombs = 0
                if not btn.is_mine:
                    for row_dx in [-1, 0, 1]:
                        for col_dx in [-1, 0, 1]:
                            neighbor = self.buttons[i + row_dx][j + col_dx]
                            if neighbor.is_mine:
                                amount_bombs += 1
                btn.amount_bombs = amount_bombs

    def mines_places(self, exclude_number):
        """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ —ñ–∑ –º—ñ–Ω–∞–º–∏"""
        ind = list(range(1, Mines.ROW * Mines.COLUMN + 1))
        ind.remove(exclude_number)
        shuffle(ind)
        return ind[:Mines.AMOUNT_OF_MINES]


game = Mines()
game.starting()
