from aiogram.dispatcher import FSMContext
import Letter_class
from main import bot, dp
from keyboard import keyboard
from aiogram import types
import postgres

from aiogram.dispatcher.filters import Command

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):

    users = await postgres.get_users(1)

    if message.from_user.id in users:
        #–ö–∏–¥–∞–µ–º –∑–¥–µ—Å—å –Ω—É–∂–Ω—ã–π —Å—Ç–µ–π—Ç
        print("–í—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ª—é–¥—è–º!")
        print("–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await postgres.create_user(message.from_user.id) #
        await message.answer('–û—Ç–ø—Ä–∞–≤—å –Ω–∞–º @—é–∑–µ—Ä–Ω–µ–π–º —Ç–≤–æ–µ–π —Ä–∞–¥–æ—Å—Ç–∏ü•∞')
        await Letter_class.Letter.q_username.set()



@dp.message_handler(state=Letter_class.Letter.q_username)
async def username_answer(message: types.Message, state: FSMContext):
    username = message.text
    await state.update_data(answer1=username)
    await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ! –¢–µ–ø–µ—Ä—å –º—ã –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üßê')
    await Letter_class.Letter.q_text_val.set()

@dp.message_handler(state=Letter_class.Letter.q_text_val)
async def text_val_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = data.get('answer1')
    text_val = message.text
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏: ')
    await message.answer(text_val, reply_markup=keyboard)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'good')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ú—ã –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª–∏) –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!')



@dp.callback_query_handler(lambda c: c.data == 'bad')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –Ω–∞–º @—é–∑–µ—Ä–Ω–µ–π–º —Ç–≤–æ–µ–π —Ä–∞–¥–æ—Å—Ç–∏ü•∞')
    await Letter_class.Letter.q_username.set()
