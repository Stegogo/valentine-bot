import aiogram
from aiogram.dispatcher import FSMContext
import states
from data import moder_chat_id
from main import bot, dp
from keyboard import menu_cd, is_correct_keyboard
from aiogram import types
import postgres
import models

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    users = await postgres.get_users(1)

    if not message.from_user.id in users:
        # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–± –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Ç—É–¥–∞
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ª—é–¥—è–º!")
        await postgres.create_user(message.from_user.id)  #

    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å –Ω–∞–º @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–≤–æ–µ–π —Ä–∞–¥–æ—Å—Ç–∏ü•∞. –ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–µ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç.')
    await states.Letter.q_username.set()


@dp.message_handler(state=states.Letter.startpoint)
async def startpoint_handler(message: types.Message):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å –Ω–∞–º @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–≤–æ–µ–π —Ä–∞–¥–æ—Å—Ç–∏ü•∞. –ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–µ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç.')
    await states.Letter.q_username.set()


@dp.message_handler(state=states.Letter.q_username)
async def username_answer(message: types.Message, state: FSMContext):
    username = message.text

    if message.forward_from:
        if message.forward_from.username:
            await state.update_data(recipient_username=str(message.forward_from.username),
                                    recipient_id=int(message.forward_from.id))
            await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ! –¢–µ–ø–µ—Ä—å –º—ã –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üßê')
            await states.Letter.q_text_val.set()
        else:
            await state.update_data(recipient_id=int(message.forward_from.id))
            await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ! –¢–µ–ø–µ—Ä—å –º—ã –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üßê')
            await states.Letter.q_text_val.set()
    elif username.startswith('@'):
        await state.update_data(recipient_username=username)
        await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ! –¢–µ–ø–µ—Ä—å –º—ã –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üßê')
        await states.Letter.q_text_val.set()
    elif username.startswith('+'):
        await state.update_data(recipient_phone_number=username)
        await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ! –¢–µ–ø–µ—Ä—å –º—ã –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Ç–≤–æ–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üßê')
        await states.Letter.q_text_val.set()
    else:
        await message.answer(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç, –µ—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º,'
            '—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä, —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +')


@dp.message_handler(state=states.Letter.q_text_val, content_types=['text'])
async def text_val_answer(message: types.Message, state: FSMContext):

    data = await state.get_data()
    username = data.get('answer1')
    text_val = message.html_text
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.type = 'TEXT'
    letter.text = text_val
    letter.sender_id = message.from_user.id

    letter = await letter.create()

    await state.update_data(letter_id=letter.id)

    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏: ')
    keyboard = await is_correct_keyboard(letter)
    await message.answer(text_val, reply_markup=keyboard, parse_mode="HTML")

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['photo'])
async def text_val_answer(message: types.Message, state: FSMContext):

    data = await state.get_data()
    username = data.get('answer1')
    text_val = message.photo[-1].file_id
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")


    letter.file_id = text_val
    letter.type = "PHOTO"
    letter.text = message.caption
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_photo(photo=letter.file_id, caption=letter.text)
    await message.answer('–í–∞—à–µ —Ñ–æ—Ç–æ', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['video'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.video.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.file_id = text_val
    letter.text = message.caption
    letter.type = 'VIDEO'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_video(video=letter.file_id, caption=letter.text)
    await message.answer('–í–∞—à–µ –≤–∏–¥–µ–æ', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['animation'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.animation.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.file_id = text_val
    letter.type = 'GIF'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_animation(animation=letter.file_id)
    await message.answer('–í–∞—à–∞ –≥–∏—Ñ–∫–∞', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['sticker'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.sticker.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.file_id = text_val
    letter.type = 'STICKER'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_sticker(sticker=letter.file_id)
    await message.answer('–í–∞—à —Å—Ç–∏–∫–µ—Ä', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['voice'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.voice.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.file_id = text_val
    letter.type = "VOICE"
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_voice(voice=letter.file_id)
    await message.answer('–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['audio'])
async def text_val_answer(message: types.Message, state: FSMContext):
    text_val = message.audio.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.file_id = text_val
    letter.type = 'AUDIO'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_audio(audio=letter.file_id)
    await message.answer('–í–∞—à–∞ –ø–µ—Å–Ω—è', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.q_text_val, content_types=['video_note'])
async def text_val_answer(message: types.Message, state: FSMContext):
    text_val = message.video_note.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = models.Letter()

    if recipient_username and recipient_id:
        letter.recipient_username = recipient_username
        letter.recipient_id = recipient_id
        username = recipient_username
    elif recipient_id:
        letter.recipient_id = recipient_id
        username = recipient_id
    elif recipient_username:
        letter.recipient_username = recipient_username
        username = recipient_username
    elif recipient_phone_number:
        letter.recipient_phone_number = recipient_phone_number
        username = recipient_phone_number
    else:
        print("problem")

    letter.file_id = text_val
    letter.type = 'VIDEO_NOTE'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_video_note(video_note=letter.file_id)
    await message.answer('–í–∞—à–∞ –ø–µ—Å–Ω—è', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_username)
async def text_val_answer1(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text_val = data.get('answer2')
    letter_id = data.get("letter_id")

    letter = await models.Letter.get(letter_id)

    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')


    if recipient_username and recipient_id:
        username = recipient_username
    elif recipient_id:
        username = recipient_id
    elif recipient_username:
        username = recipient_username
    elif recipient_phone_number:
        username = recipient_phone_number
    else:
        print("problem")

    if message.forward_from:
        if message.forward_from.username:
            await state.update_data(recipient_username=str(message.forward_from.username),
                                    recipient_id=int(message.forward_from.id))
            await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ!')
            await letter.update(recipient_username=str(message.forward_from.username)).apply()

        else:
            await state.update_data(recipient_id=int(message.forward_from.id))
            await letter.update(recipient_id=int(message.forward_from.id)).apply()
            await message.answer('–°—É–ø–µ—Ä!')


        await states.Letter.endpoint.set()

    elif message.text.startswith('@'):
        await state.update_data(recipient_username=username)
        await letter.update(recipient_username=username).apply()
        await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ!')
        await states.Letter.endpoint.set()

    elif message.text.startswith('+'):
        await state.update_data(recipient_phone_number=username)
        await letter.update(recipient_phone_number=username).apply()
        await message.answer('–°—É–ø–µ—Ä! –ú—ã –Ω–∞—à–ª–∏ –µ–≥–æ!')
        await states.Letter.endpoint.set()

    else:
        await message.answer(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç, –µ—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º,'
            '—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä, —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +')



    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')



    keyboard = await is_correct_keyboard(letter)
    await message.answer(text_val, reply_markup=keyboard)



@dp.message_handler(state=states.Letter.correct_val, content_types=['text'])
async def text_val_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text_val = message.text
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='TEXT',
        text=text_val,
        sender_id=message.from_user.id
    ).apply()



    await state.update_data(letter_id=letter.id)

    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏: ')
    keyboard = await is_correct_keyboard(letter)
    await message.answer(text_val, reply_markup=keyboard, parse_mode='HTML')
    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['photo'])
async def text_val_answer(message: types.Message, state: FSMContext):

    data = await state.get_data()
    username = data.get('answer1')
    text_val = message.photo[-1].file_id
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='PHOTO',
        text=message.caption,
        file_id=text_val,
        sender_id=message.from_user.id
    ).apply()

    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_photo(photo=letter.file_id, caption=letter.text)
    await message.answer('–í–∞—à–µ —Ñ–æ—Ç–æ', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['video'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.video.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='VIDEO',
        text=message.caption,
        sender_id=message.from_user.id,
        file_id=text_val
    ).apply()

    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_video(video=letter.file_id, caption=letter.text)
    await message.answer('–í–∞—à–µ –≤–∏–¥–µ–æ', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['animation'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.animation.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='GIF',
        sender_id=message.from_user.id,
        file_id=text_val
    ).apply()

    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_animation(animation=letter.file_id)
    await message.answer('–í–∞—à–∞ –≥–∏—Ñ–∫–∞', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['sticker'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.sticker.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='STICKER',
        sender_id=message.from_user.id,
        file_id=text_val
    ).apply()

    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_sticker(sticker=letter.file_id)
    await message.answer('–í–∞—à —Å—Ç–∏–∫–µ—Ä', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['voice'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.voice.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='VOICE',
        sender_id=message.from_user.id,
        file_id=text_val
    ).apply()

    letter.file_id = text_val
    letter.type = "VOICE"
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_voice(voice=letter.file_id)
    await message.answer('–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['audio'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.audio.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='AUDIO',
        sender_id=message.from_user.id,
        file_id=text_val
    ).apply()

    letter.file_id = text_val
    letter.type = 'AUDIO'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_audio(audio=letter.file_id)
    await message.answer('–í–∞—à–∞ –ø–µ—Å–Ω—è', reply_markup=keyboard)

    await states.Letter.endpoint.set()


@dp.message_handler(state=states.Letter.correct_val, content_types=['video_note'])
async def text_val_answer(message: types.Message, state: FSMContext):

    text_val = message.video_note.file_id

    data = await state.get_data()
    await state.update_data(answer2=text_val)
    letter_id = data.get("letter_id")

    # try
    recipient_username = data.get('recipient_username')
    recipient_id = data.get('recipient_id')
    recipient_phone_number = data.get('recipient_phone_number')

    letter = await models.Letter.get(letter_id)

    if recipient_username and recipient_id:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username,
            recipient_id=recipient_id
        ).apply()
    elif recipient_id:
        username = recipient_id
        await letter.update(
            recipient_id=recipient_id
        ).apply()
    elif recipient_username:
        username = recipient_username
        await letter.update(
            recipient_username=recipient_username
        ).apply()

    elif recipient_phone_number:

        username = recipient_phone_number
        await letter.update(
            recipient_phone_number=recipient_phone_number
        ).apply()
    else:
        print("problem")


    await letter.update(
        type='VIDEO_NOTE',
        sender_id=message.from_user.id,
        file_id=text_val
    ).apply()

    letter.file_id = text_val
    letter.type = 'VIDEO_NOTE'
    letter.sender_id = message.from_user.id
    letter = await letter.create()
    await state.update_data(letter_id=letter.id)
    await message.answer('–Ø –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª?')
    await message.answer(f'–¢–≤–æ—è –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}')
    keyboard = await is_correct_keyboard(letter)
    await message.answer_video_note(video_note=letter.file_id)
    await message.answer('–í–∞—à–∞ –ø–µ—Å–Ω—è', reply_markup=keyboard)

    await states.Letter.endpoint.set()


async def process_callback_button1(callback_query: types.CallbackQuery, **kwargs):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º')
    await states.Letter.correct_username.set()
    await callback_query.message.delete_reply_markup()

async def process_callback_button2(callback_query: types.CallbackQuery, **kwargs):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É')
    await states.Letter.correct_val.set()
    await callback_query.message.delete_reply_markup()


async def process_callback_button3(callback_query: types.CallbackQuery, id, **kwargs):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           '–û—Ç–ø—Ä–∞–≤–∏–ª–∏! –ß—Ç–æ–±—ã –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –µ—â—ë –æ–¥–Ω—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞–∂–º–∏ –Ω–∞ /new)')
    letter = await postgres.get_letter(int(id))
    await callback_query.message.delete_reply_markup()
    await bot.send_message(moder_chat_id, '–Æ–∑–µ—Ä–Ω–µ–π–º')
    if letter.recipient_username:
        await bot.send_message(moder_chat_id, letter.recipient_username)
    elif letter.recipient_phone_number:
        await bot.send_message(moder_chat_id, letter.recipient_phone_number)
    else:
        await bot.send_message(moder_chat_id, letter.recipient_id)
    await bot.send_message(moder_chat_id, '–¢–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏')
    if letter.type == "PHOTO":
        await bot.send_photo(chat_id=moder_chat_id, photo=letter.file_id, caption=letter.text, parse_mode="HTML")
    elif letter.type == 'VIDEO':
        await bot.send_video(chat_id=moder_chat_id, video=letter.file_id, caption=letter.text, parse_mode="HTML")
    elif letter.type == 'GIF':
        await bot.send_animation(chat_id=moder_chat_id, animation=letter.file_id)
    elif letter.type == 'STICKER':
        await bot.send_sticker(chat_id=moder_chat_id, sticker=letter.file_id)
    elif letter.type == 'VOICE':
        await bot.send_voice(chat_id=moder_chat_id, voice=letter.file_id)
    elif letter.type == 'VIDEO_NOTE':
        await bot.send_video_note(chat_id=moder_chat_id, video_note=letter.file_id)
    elif letter.type == 'AUDIO':
        await bot.send_audio(chat_id=moder_chat_id, audio=letter.file_id)
    elif letter.type == 'TEXT':
        await bot.send_message(chat_id=moder_chat_id, text=letter.text, parse_mode="HTML")

    await states.Letter.startpoint.set()




@dp.callback_query_handler(menu_cd.filter(), state='*')
async def navigate(call: types.CallbackQuery, callback_data: dict):
    current_level = callback_data.get('level')
    id = callback_data.get('id')

    levels = {
        '1': process_callback_button1,
        '2': process_callback_button2,
        '3': process_callback_button3
    }

    current_level_function = levels[current_level]

    await current_level_function(
        call, id=id
    )
